chapter 1 - 안드로이드구조


안드로이드는 리눅스커널을 사용함.
리눅스커널위에는 HAL 이라는 계층존재. -> 리눅스커널과 하드웨어 기기간의인터페이스부분. 드라이버구현
Android 런타임 -> 안드로이드 애플리케이션을 구동하기위한 가상머신. 5.0 이상부터는 ART사용
java API -> 개발자가 애플리케이션을 제작할때 사용하는 라이브러리
시스템 어플리케이션 : 안드로이드os 내부에 내장되어있는 애플리케이션, 기본앱. camera, calendar
Wi-Fi RTT : RTT를 지원하는 WIFI 장비를 찾아 실내에서 현재위치를 측정할수있는 기능.
안드로이드 4대구성요소
Activity, Service, Broadcast Broadcast Receiver, Content Provider.
Activity -> 현재 보이는 화면을 관리하는 실행단위
onCreate() : activity가 생성될때 자동호출, 화면회전이 발생했을시 자동호출

chapter 2 - 뷰의 기본개념


눈에보이는 모든 요소를 view라고 부름.
레이아웃 : 컨테이너, 뷰 그룹이라고도불림. 
위젯 : 문자열입력, 출력등 어떤기능을 가지고있는 뷰들을 위젯.
id속성 : 특정 뷰의 구분짓기위함.
layout_width, layout_height, margin, padding, layout_gravity --> 자기가 원하는 공간으로 이동
view는 눈에보이는 모든요소 --> 위젯, 레이아웃(컨테이너,뷰그룹) 으로나뉨

chater 3 - layout


Linear Layout -> 좌에서우, 위에서 아래로 뷰를 배치하는 레이아웃.
orientation -> vertical, horizontal

layout_weight -> 뷰들을 배치하는 비율
Relative Layout -> 뷰들간의 관계를 설정하여 배치하는 레이아웃.
alignParentTop, alignParentBottom, alignParentLeft, alignParentRight

chater 4 - Component
@TextView
textAppearance -> text테마
TextView text1 = (TextView)findViewById(R.id.text2);

@Button
버튼이 눌러졋을시 리스너이벤트를 사용함.
	btnListener1 listener1 = new BtnListener1(); --> OnCreate 안에서
        button1.setOnClickListener(listener1);
    }
    //첫번째 버튼과 연결된 리스너
    class BtnListener1 implements View.OnClickListener{
        @Override
        public void onClick(View v) {
            text2.setText("첫번째 버튼을 눌렀습니다.");
        }
    }
 버튼 두개를 하나의 객체로 처리
 class BtnListener34 implements View.OnClickListener{
        @Override
        public void onClick(View v) {
            //이벤트가 발생된 뷰의 ID값을 추출
            int id = v.getId();
            switch (id){
                case R.id.button3 :
                    text2.setText("세번째 버튼을 눌렀습니다.");
                    break;
                case R.id.button4 :
                    text2.setText("네번쨰 버튼을 눌렀습니다.");

            }
        }
리스너객체없이 오직 버튼만누루면 호출되는 메서드
public void btn5Method(View view){
        text2.setText("다섯번째 버튼을 눌렀습니다");
    }
    
@checkbox
isChecked() ==> 체크박스가 체크되어있을시 true
setChecked(true,false) --> 어플실행시 체크박스가 미리 체크 or 미체크
toggle(); --> 체크박스의 체크반전.
class CheckBoxListener implements CompoundButton.OnCheckedChangeListener{
        @Override
        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            int id = buttonView.getId();
            switch(id){
                case R.id.checkBox:
                    if(isChecked == true)
                        text1.setText("checkbox 1 is checked");
                    else
                        text1.setText("checkbox 1 is checked non");
                    break;
                case R.id.checkBox2 :
                    if(isChecked == true)
                        text1.setText("checkbox 2 is checked");
                    else
                        text1.setText("checkbox 2 is checked non");
                    break;
                case R.id.checkBox3 :
                    if(isChecked == true)
                        text1.setText("checkbox3 is checked");
                    else
                        text1.setText("checkbox3 is checked non");
                    break;
            }
        }
    }
}
@RadioButton
라디오그룹안에 라디오버튼은 하나만선택가능
setChecked(); 그룹내의 오로지 하나의 라디오버튼만 선택가능.
RadioGroup group1; -->라디오 그룹내의 라디오버튼중 어떤것이 체크되어있는지 확인.
int id1 = group1.getCheckedRadioButtonId();

class RadioListener implements RadioGroup.OnCheckedChangeListener{
     @Override
    public void onCheckedChanged(RadioGroup group, int checkedId)
객체생성하면 그 그룹의 아이디값이들어오고 그룹내의 어떤라디오버튼이 선택되어있는지 int checkedId를 통해 알수잇음.
 RadioListener radiolisten = new RadioListener();
        group1.setOnCheckedChangeListener(radiolisten);
        
@ProgressBar
둥글게 돌아가는것, 바형태
 bar5.incrementProgressBy(5); -> 바 5증가
 bar5.incrementProgressBy(-5); -> 바 5감소
 bar5.setProgress(80); -> 한번에 80증가.
 
 
@seekbar
좌우로 움직이면서 숫자값을 설정하는것. progressbar와 비슷
시크바의 목적은 설정된값을 가져오는걸의미
seek1.incrementProgressBy(1);
 seek1.setProgress(9);
 int value1 = seek1.getProgress(); -> 시크바의 벨류값 출력
 
 
 class SeekBarListener implements SeekBar.OnSeekBarChangeListener{
 //현재 값을 변경시켰을대 반응 하는 메서드
        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
 // 값을 변경하기위해 터치  하면 호출되는 메서드
        public void onStartTrackingTouch(SeekBar seekBar) {
 // 값을 변경하고 터치를 떄면호출되는 메서드
        public void onStopTrackingTouch(SeekBar seekBar) {
@EditText
사용자가 입력한값
edit1.setText("new edit text"); -> setText()
String str = edit1.getText().toString(); -> getText()
class EnterListener implements TextView.OnEditorActionListener{
        @Override
        public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
            return true; --> false일시 키보드창이 내려감.
        }
    }

 class WatcherClass implements TextWatcher {

        // 문자열 값이 변경되었을 때
        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            text1.setText("changed text : " + s);
        } --> 텍스트가변경될때 동시에 실행됨
 
 
@ImageView
drawable vs mipmap
안드로이드에서 이미지를 넣는 폴더 -> drawable, mipmap
 mipmap은 비트맵방식에서 백터방식으로 이미지를 변경, 런처아이콘용 이미지를 넣는폴더용
 
 
 Chapter - 4 
 @Adapter View
 ListView list1;
 String [] data1 = {"list1","list2","list3","list4","list5","list6","list7","list8"
    ,"list9","list10","list11","list12","list13","list14","list15","list16","list17","list18"};
 리스트에담을 리스트값의 배열
 ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1,data1);
        list1.setAdapter(adapter);
 
 
  list1.setOnItemClickListener(listener); --> 리스트배열의 값건드리기.
class ListListener implements AdapterView.OnItemClickListener{
        @Override
        //position => 사용자가 터치한 인덱스번호

        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
            text1.setText(data1[position]);
        }
    }
@Custom ListView
 ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,R.layout.row, R.id.textView, data); 사용자가 직접 layout을만듬
 .row --> res / layout / 우클릭/ new / layout new resource file

@Custom Layout (retry)
lass ListAdapater extends BaseAdapter{
        btnListener listener = new btnListener();

        //배열의 갯수
        @Override
        public int getCount() {
            return data.length;
        }

        @Override
        public Object getItem(int position) {
            return null;
        }

        @Override
        public long getItemId(int position) {
            return 0;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            if(convertView == null){
                LayoutInflater inflater = getLayoutInflater();
                convertView = inflater.inflate(R.layout.row , null);
            }
            TextView sub_text = (TextView)convertView.findViewById(R.id.textView);
            Button sub_btn1 = (Button)convertView.findViewById(R.id.button);
            Button sub_btn2 = (Button)convertView.findViewById(R.id.button2);
            
            
            sub_btn1.setOnClickListener(listener);
            sub_btn2.setOnClickListener(listener);
            sub_text.setText(data[position]);
            return convertView;
            
        }
    }
@customview2
 int [] imgRes = {R.drawable.imgflag1, R.drawable.imgflag2, R.drawable.imgflag3, R.drawable.imgflag4,
    R.drawable.imgflag5, R.drawable.imgflag6,R.drawable.imgflag7,R.drawable.imgflag8};

String [] data1 = {"토고", "프랑스", "스위스", "스페인", "일본", "독일", "브라질","대한민국"};
String [] data2 = {"togo", "france", "swiss","spain","japan","german","brazil","korea"};

해쉬맵 ? <키:값>
ArrayList<HashMap<String, Object>> data_list = new ArrayList<>();
 for(int i = 0; i < imgRes.length; i++){
        HashMap<String, Object> map = new HashMap<>();
        map.put("flag",imgRes[i]);
        map.put("data1",data1[i]);
        map.put("data2",data2[i]);
        data_list.add(map);
}
        
 


@Spinner
스피너는 여러항목을 제공하고 선택할수잇는 adapterview이다.
작은스마트폰화면을 효율적으로 사용할수있게 팝업창으로 나타낼수있는 view.
String [] data1 = {"spinner1","spinner2","spinner3","spinner4","spinner5"};
Spinner spin1;
 ArrayAdapter<String> adapter1 = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item,data1);
int index = spin1.getSelectedItemPosition();

class SpinnerListener implements AdapterView.OnItemSelectedListener{
        //사용자가 항목을 선택햇을시
        @Override
        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            text1.setText(data1[position]);

        }

        @Override
        public void onNothingSelected(AdapterView<?> parent) {

        }
@ViewPager
좌우로 스와프하며 view를전환하는 adapterview
LayoutInflater는 XML에 정의된 Resource를 View 객체로 반환해주는 역할을 한다.
ViewPager pager1;
ArrayList<View> viewList = new ArrayList<>();
LayoutInflater inflater = getLayoutInflater();
View v1 = inflater.inflate(R.layout.view1,null);
viewList.add(v1);
-xml로짜여진 뷰를 view객체로 전환하여서 arraylist에 추가하였음.

class CustomAdapter extends PagerAdapter
//뷰페이저의 항목리스트 갯수
        public int getCount() {
            return viewList.size();
        }
public Object instantiateItem(@NonNull ViewGroup container, int position) {
            //position 번쨰 뷰객체 를 뷰페이저에 세팅한다.
            pager1.addView(viewList.get(position));
            return viewList.get(position);
        }
//instantiateItem메서드에서 반환한 뷰객체를 사용할것인가?
 @Override
        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {
            return view == object;
        }
 //뷰가 제거될떄 호출되는 메서드

        @Override
        public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
            pager1.removeView((View)object);
        }
        
뷰페이저 리스너 
class PagerListener implements ViewPager.OnPageChangeListener{
        //뷰의 전환이 완료 되었을떄 호출되는 메서드
        @Override
        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
            text1.setText(position + "번쨰 뷰가 나타났습니다.");
        }
        
@OptionMenu --> Activity를위한메뉴 **
onCreateOptionsMenu
Activity의 객체가 만들어 질때 자동으로 호출되는 메서드
메서드가 true를 반환하면 메뉴가 나타난다.
코드 or xml 두가지로 옵션매뉴를 정하는방법이존재.
1. xml -> RES폴더내에 new repository -> menu.xml세팅
public boolean onCreateOptionsMenu(Menu menu) {
        /*//XML를 통해 메뉴를 구성할수 있는 객체를 추출
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.option_menu,menu);
     //true 값을 해줘야 메뉴가 나타남.
        */
 	return true;
 	
 }
 public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        //사용자가 터치한 항목 객체의 id를 추출
        int id = item.getItemId();
//        switch(id){
//            case R.id.item1:
//                text1.setText("메뉴 1을 터치 하였습니다.");
//                break;
//            case R.id.item2_1:
//                text1.setText("서브메뉴 1을 터치하였습니다.");
//                break;
//            case R.id.item2_2:
//                text1.setText("서브메뉴 2를 터치하였습니다.");
//                break;
//            case R.id.item3:
//                text1.setText("메뉴3 을 터치 하였습니다.");
//
//        }
2. 코드를 통한구현
 public boolean onCreateOptionsMenu(Menu menu) {
 // FIRST는 정수1을 의미id값을 구별하기위함 존재.
menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, "코드메뉴1" );
        //menu.add(Menu.NONE, Menu.FIRST + 1, Menu.NONE, "코드메뉴2" );
        Menu sub = menu.addSubMenu("코드메뉴2");
        sub.add(Menu.NONE ,Menu.FIRST+10, Menu.NONE, "코드 서브메뉴1");
        sub.add(Menu.NONE ,Menu.FIRST+20, Menu.NONE, "코드 서브메뉴2");
        menu.add(Menu.NONE, Menu.FIRST + 2, Menu.NONE, "코드메뉴3" );

        return true;
    }
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
     switch(id){
                case Menu.FIRST:
                    text1.setText("코드메뉴 1을 터치하였습니다.");
                    break;
                case Menu.FIRST + 10:
                    text1.setText("코드서브메뉴 1을 터치하였습니다.");
                    break;
                case Menu.FIRST + 20:
                    text1.setText("코드서브메뉴 2를 터치하였습니다.");
                    break;
                case Menu.FIRST + 2:
                    text1.setText("코드메뉴 2를 터치하였습니다.");
                    break;
            }


        return super.onOptionsItemSelected(item);

@Context Menu -> 화면상에배치된 뷰들을 위한 메뉴
메뉴가 설정된 뷰를 길게 누루면 메뉴가나타남 .-> 길게눌러야한다는 단점. 경우가 별로없음. 리스트뷰에다설정 하는
것이 주로 많음.

@popup menu
public void btnMethod(View view){
        PopupMenu pop = new PopupMenu(this, text1);
        Menu menu = pop.getMenu();
        
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.popup_menu,menu);
        
        PopupListener listener = new PopupListener();
        pop.setOnMenuItemClickListener(listener);
        pop.show();
    }
    class PopupListener implements PopupMenu.OnMenuItemClickListener{
        @Override
        public boolean onMenuItemClick(MenuItem item) {
            int id = item.getItemId();
            switch(id){
                case R.id.item1:
                    text1.setText("menu1");
                    break;
                case R.id.item2:
                    text1.setText("menu2");
                    break;
                case R.id.item3:
                    text1.setText("menu3");
                    break;
            }

            return false;
        }
@ActionBar
안드로이드 맨위에실행될시에 여러개의액션바를 줄수있다.
public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_menu,menu);
        return true;
    }
    
showAsAction -> always, withText, never, ifRoom, collapseActionView
collapseActionView --> 접어다펼쳤다할수잇음.
ifRoom --> 공간이잇을시에 나타남

페이지에서 무언가를 찾을때. 서치 사용
searchView search_view = (SearchView)search_item.getActionView();
search_view.setQueryHint("검색어를 입력해주세요."); // 서치 replace
class SearchViewListener implements SearchView.OnQueryTextListener{
        @Override
        //서치뷰의 문자열이 변경될때마다 호출되는 메서드
        public boolean onQueryTextChange(String newText) {
            text1.setText(newText);
            return false;
        }
        //키보드의 엔터키를 누루면 호출되는 메서드
        @Override
        public boolean onQueryTextSubmit(String query) {
            text2.setText(query);
            return false;
        }
    }

@Toast 메세지
사용자에게 잠시동안 보여주는 가상메세지
 Toast t1 = Toast.makeText(this,"hello from the other side", Toast.LENGTH_SHORT);
        // 토스트 메세 지를 운영체제에 요청
        t1.show();

커스텀 토스트메세지만들기

LayoutInflater inflater = getLayoutInflater();
View v1 = inflater.inflate(R.layout.custom_toast, null);
ImageView img1 = (ImageView)v1.findViewById(R.id.imageView3);
TextView text1 = (TextView)v1.findViewById(R.id.textView2);
img1.setImageResource(R.drawable.img_android);
text1.setText("custom toast");

Toast t2 = new Toast(this);
        t2.setView(v1);
        t2.setDuration(Toast.LENGTH_LONG);
        t2.setGravity(Gravity.CENTER,0,0);
        t2.show();
        
@dialog
개발자가 필요할때 사용자에게 메세지를 전달하는 용도로 사용,
다이얼로그가 떠잇을시에는 주변뷰를 누룰수없음.
메세지전달이나 입력을요구할때.
-기본다이얼로그
AlertDialog.Builder builder = new AlertDialog.Builder(this);
builder.setTitle("default dialog");
builder.setMessage("dialog's message");
builder.setIcon(R.mipmap.ic_launcher);

  DialogListener listener = new DialogListener();
  
builder.setPositiveButton("Positive",listener);
builder.setNeutralButton("Neutral",listener);
builder.setNegativeButton("Negative",listener);
버튼종류에따라 기능.

        class DialogListener implements DialogInterface.OnClickListener{
        @Override
        public void onClick(DialogInterface dialog, int which) {
            //버튼 종류
            switch(which){
                case DialogInterface.BUTTON_POSITIVE:
                    text1.setText("Positive");
                    break;
                    case DialogInterface.BUTTON_NEGATIVE:
                        text1.setText("Negative");
                        break;
                        case DialogInterface.BUTTON_NEUTRAL:
                            text1.setText("Neutral");
                            break;

            }
        }
    }
        
-커스텀다이얼로그
AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("custom dialog");
        //setmessage 를 커스텀으로 교체
        builder.setIcon(R.mipmap.ic_launcher);

        LayoutInflater inflater = getLayoutInflater();
        View v1 = inflater.inflate(R.layout.dialog, null);
        builder.setView(v1);
        Dialog2Listener listener = new Dialog2Listener();

        builder.setPositiveButton("ok",listener);
        builder.setNegativeButton("No",null);
        builder.show();
        
        
        class Dialog2Listener implements DialogInterface.OnClickListener{
        @Override
        public void onClick(DialogInterface dialog, int which) {
            AlertDialog alert = (AlertDialog)dialog;
            EditText edit1 = (EditText)alert.findViewById(R.id.editTextTextPersonName);
            EditText edit2 = (EditText)alert.findViewById(R.id.editTextTextPersonName2);
            String str1 = edit1.getText().toString();
            String str2 = edit2.getText().toString();

            text1.setText("edit1 : " + str1 + str2);
-캘린더
  Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DAY_OF_MONTH);

        Dialog3Listener listener = new Dialog3Listener();
        DatePickerDialog picker = new DatePickerDialog(this, listener, year, month, day);
        picker.show();
        
        class Dialog3Listener implements DatePickerDialog.OnDateSetListener{
        @Override
        public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
            text1.setText(year + "년 " + (month + 1) + "월 " + dayOfMonth + "일"); --> month에 +1해줘야함
            
        }

-타임켈린더
Calendar calendar = Calendar.getInstance();
        int hour = calendar.get(Calendar.HOUR);
        int minute = calendar.get(Calendar.MINUTE);

        Dialog4Listener listener = new Dialog4Listener();
        TimePickerDialog picker = new TimePickerDialog(this,listener,hour,minute, true);
        picker.show();
    }

    class Dialog4Listener implements TimePickerDialog.OnTimeSetListener{
        @Override
        public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
            text1.setText(hourOfDay + "시 " + minute + "분");
        }
    }

@리스트 다이얼로그
public void btn1Method(View view){
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("list dialog");
        builder.setNegativeButton("exit",null);
        Dialog1Listener listener = new Dialog1Listener();

        builder.setItems(data1,listener);
        builder.show();
    }

    class Dialog1Listener implements DialogInterface.OnClickListener{
        @Override
        public void onClick(DialogInterface dialog, int which) {
            text1.setText("list : " + data1[which]);
        }
    }
-- 커스텀 리스트 다이얼로그
 public void btn2Method(View view){
        ArrayList<HashMap<String, Object>> list = new ArrayList<>();
        for(int i = 0; i < data2.length;i++){
            HashMap<String,Object> map = new HashMap<String, Object>();
            map.put("data2",data2[i]);
            map.put("data3",data3[i]);
            list.add(map);
        }

        String [] keys = {"data2","data3"};
        int [] ids = {R.id.textView2, R.id.imageView};
        SimpleAdapter adapter = new SimpleAdapter(this, list, R.layout.row, keys, ids);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("custom list dialog");
        Dialog2Listener listener = new Dialog2Listener();
        builder.setAdapter(adapter, listener);
        builder.setNegativeButton("cancel",null);
        builder.show();

    }
    class Dialog2Listener implements DialogInterface.OnClickListener{
        @Override
        public void onClick(DialogInterface dialog, int which) {
            text1.setText("custom list : " + data2[which]);
        }
    }
    
@notification
어플리케이션과 별도로 관리되는 메서드
notification메세지를 os를 요청하면 os는 알림창 영역에 알림메세지를 표시함.
사용자가 메세지를 확인하거나 제거하기전까지 메세지유지.
메세지를 터치하면 지정된 activity가 실행되어 애플리케이션 실행을 유도할수있다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@권한
안드로이드 6.0이상부터는 권한사용허가필요
권한은 사용자에게 애플리케이션이 어떠한 기능을 사용하는지 알려주는 목적으로 사용.
권한사용시 반드시 사용자에게 고지하고 승인받는 작업이 필요하다.
AndroidManifest.xml파일내에

<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
   //권한 허용여부를 확인한다 .
int chk = checkCallingOrSelfPermission(permission);
            //거부상태 여부확인
   if(chk == PackageManager.PERMISSION_DENIED){
            //사용자에게 권한 허용 여부를 확인하는 창을 띄운다 .
          requestPermissions(permission_list,0);
  }

@쓰래드
ANR ->안드로이드는 activity의 코드를 처리하기위해 쓰래드를 발생함. Main Thread , UI Thread
MainThread가 현재 작업을 하지 않을때만 화면 작업이 가능하며 Main Thread가 바쁠때 화면 작업이나 터치가 발생하면ANR이 발생함.(application not respond)
MainThread가 매우바쁘면 아무일도일어나지않음.메인스레드는 반드시끝나야함
안드로이드 8.0이상부터는 개발자가 발생시킨 쓰래드에서 화면처리가가능.
ThreadClass thread = new ThreadClass();
 thread.start();
 class ThreadClass extends Thread{
        @Override
        public void run() {
            while(isRunning){
                SystemClock.sleep(100);
                long now = System.currentTimeMillis();
                Log.d("text", "쓰래드 : " + now);
                text2.setText("쓰래드 : " + now);
            }
        }
    }
@Handler를 활용한 반복작업
main thread에서 처리해야할코드중 일정작업을 반복적으로 해야할떄가잇음. 
handler는 개발자가 안드로이드 os에게 작업 수행을 요청하는 역할을함.
개발자가 작업을 요청하면 안드로이드os는 작업을 하지 않을때 개발자가 요청한 작업을 처리함.
main thread에서 처리.
5초이상 걸리는작업불가. 화면처리가능

Handler handler = null;

handler = new Handler();
ThreadClass thread = new ThreadClass();
handler.post(thread);

class ThreadClass extends Thread{
        @Override
        public void run() {
            long now = System.currentTimeMillis();
            text2.setText("Handler : " + now);
            //현재 작업을 다시 요청함.
            //handler.post(this);
            handler.postDelayed(this,100);
        }
    }
class ThreadClass extends Thread{

        @Override
        public void run() {
            int a1 = 10;
            int a2 = 20;
            while(isRunning){
                SystemClock.sleep(100);
                long now = System.currentTimeMillis();
                Log.d("test","오래걸리는 작업 : " + now);
                SystemClock.sleep(100);
                handler.sendEmptyMessage(0);
                SystemClock.sleep(100);
                handler.sendEmptyMessage(1);
                //핸들러 요청을할때 화면처리를 위한 데이터를 전달.
                SystemClock.sleep(100);
                Message msg = new Message();
                msg.what = 2;
                msg.arg1 = ++a1;
                msg.arg2 = ++a2;
                msg.obj = now;

                handler.sendMessage(msg);
            }
        }
    }
    class DisplayHandler extends Handler{

        //개발자가 발생시킨 쓰래드에서 화면에 관련된 처리를 하기위해
        //작업을 요청하면 자동으로 호출됨 Main Thread
        @Override
        public void handleMessage(@NonNull Message msg) {
            super.handleMessage(msg);
            // what 값으로 분기
            switch(msg.what){
                case 0:
                    text2.setText("handler1");
                    break;
                case 1:
                    text2.setText("handler2");
                    break;
                case 2:
                    text2.setText(msg.arg1 + ", " + msg.arg2 + ", " + msg.obj);
                    break;
            }
        }
    }
    
    
 @AsyncTask
 class AsyncTaskClass extends AsyncTask<Integer, Long, String>{
        @Override
        
        //doInBackground 메서드가 호출되기전에 호출되는 메서드 Main Thread가처
        protected void onPreExecute() {
            super.onPreExecute();
        }
	//메인쓰레드가아닌 일반쓰레드가 처리하는
        @Override
        protected String doInBackground(Integer... integers) {
            return null;
        }
	//doInBackground메서드에서 publishProgress메서드를 호출하면 Main Thread가 처리하는 메서드. 일반 doInBackground메서드내에서 화면처리가 필요할때 main thread
        @Override
        protected void onProgressUpdate(Long... values) {
            super.onProgressUpdate(values);
        }
//doInBackground가 완료되면 Main thread가 처리
        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
        }
    }
}
@RunOnUiThread
개발자가 발생시킨 일반쓰래드에서 코드일부를 Main Thread가 처리할수있도록 하는메서드
class ThreadClass extends Thread{
        @Override
        public void run() {
            while(isRunning){
                SystemClock.sleep(100);
                final long time = System.currentTimeMillis();
                Log.d("test", "thread : " + time);

                runOnUiThread(new Runnable(){
                    @Override
                    public void run() {
                        text2.setText("Thread : " + time);
                    }
                });class ThreadClass exclass ThreadClass extends Thread{
        @Override
        public void run() {
            while(isRunning){
                SystemClock.sleep(100);
                final long time = System.currentTimeMillis();
                Log.d("test", "thread : " + time);

                runOnUiThread(new Runnable(){
                    @Override
                    public void run() {
                        text2.setText("Thread : " + time);
                    }
                });
            }
        }
    }tends Thread{
        @Override
        public void run() {
            while(isRunning){
                SystemClock.sleep(100);
                final long time = System.currentTimeMillis();
                Log.d("test", "thread : " + time);

                runOnUiThread(new Runnable(){
                    @Override
                    public void run() {
                        text2.setText("Thread : " + time);
                    }
                });
            }
        }
    }
            }
        }
    }
    
@액티비티 실행하기
안드로이드 4대구성요소
하나의 애플리케이션은 독립된 실행단위인 4대구성요소로 구성
Activity : 화면
Service : 백그라운드 실행단위
Broad Cast Receiver : Os가 전달하는 메세지를 전달받아 실행되는 실행단위.
Contents Provider : 저장된 데이터를 제공하기 위한 실행단위.

Intent : 새로운 activity 를 실행하게됨. (새로운화면) 개발자가 직접 실행하는것이 아니라 OS에게 실행을 요청하게됨. 실행요청을 전달받은 OS는 해당실행요소를 실행하게되는데 실행요청을 위한 정보를 담는 객체가 Intent이다.
첫번쨰 액티비티가 두번쨰 액티비티를 실행하게되면 첫번째는 back Stack인 일시정지상태인 스택에들어감
새로실행된 액티비티가 제거되면 back stack에있던 activity가 다시활동하게됨.

 Intent intent = new Intent(this, SecondActivity.class);
        startActivity(intent);
@startActivityForResult
두번쨰 액티비티실행후 다시돌아왓을때 실행할코드가있으면 실행할수있음.
 startActivityForResult(intent, 0);

    }

    @Override
    
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        text2.setText("other Activity back");
	// resultCode = 돌아올때 어떤Activity에서 반환했는지 알기가능
	setResult(RESULT_CANCELED);
	switch(resultCode){
            case RESULT_OK:
                int value1 = data.getIntExtra("value1",0);
                double value2 = data.getDoubleExtra("value2",0.0);
                boolean value3 = data.getBooleanExtra("value3",false);
                String value4 = data.getStringExtra("value4");

                text1.setText("value1 : " + value1 + "\n");
                text1.append("value2 : " + value2 + "\n");
                text1.append("value3 : " + value3 + "\n");
                text1.append("value4 : " + value4);
                break;
        }

    }
    
    
    startActivityForResult(intent, 0); --> 정수값이 어떤 엑티비티를 실행하고 왔는지 알기위함
@데이터전달하기
 intent.putExtra("data1", 100);
        intent.putExtra("data2", 11.11);
        
@객체전달하기.
@다른어플리케이션에서 또다른 에플리케이션을 실행하는 intent
AndroidManifest.xml -> intentfilter 
<intent-filter>
                <action android:name="com.test.second"/>
                <category android:name="android.intent.category.DEFAULT"/>
</intent-filter>




Intent intent = new Intent("com.test.second");
만약 똑같은 intent filter 가설정되어있을시 여러어플중 고르는창이 뜬다.


